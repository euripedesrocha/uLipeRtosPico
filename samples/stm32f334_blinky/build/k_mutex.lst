ARM GAS  /tmp/ccSqR6Ip.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"k_mutex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.mutex_take,"ax",%progbits
  18              		.align	1
  19              		.global	mutex_take
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	mutex_take:
  26              	.LFB20:
  27              		.file 1 "../../picokernel/k_mutex.c"
   1:../../picokernel/k_mutex.c **** /**
   2:../../picokernel/k_mutex.c ****  * 							ULIPE RTOS PICO
   3:../../picokernel/k_mutex.c ****  *
   4:../../picokernel/k_mutex.c ****  *  @file k_mutex.h
   5:../../picokernel/k_mutex.c ****  *
   6:../../picokernel/k_mutex.c ****  *  @brief mutual exclusion semaphore stuff
   7:../../picokernel/k_mutex.c ****  *
   8:../../picokernel/k_mutex.c ****  */
   9:../../picokernel/k_mutex.c **** #include "ulipe_rtos_pico.h"
  10:../../picokernel/k_mutex.c **** 
  11:../../picokernel/k_mutex.c **** 
  12:../../picokernel/k_mutex.c **** /** internal functions */
  13:../../picokernel/k_mutex.c **** 
  14:../../picokernel/k_mutex.c **** 
  15:../../picokernel/k_mutex.c **** /** public functions */
  16:../../picokernel/k_mutex.c **** k_status_t mutex_take(kmutex_t *m, bool try)
  17:../../picokernel/k_mutex.c **** {
  28              		.loc 1 17 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 14, -4
ARM GAS  /tmp/ccSqR6Ip.s 			page 2


  42 0004 0446     		mov	r4, r0
  43 0006 8846     		mov	r8, r1
  44              	.LVL1:
  18:../../picokernel/k_mutex.c **** 	k_status_t ret = k_status_ok;
  19:../../picokernel/k_mutex.c **** 	bool reesched = false;
  20:../../picokernel/k_mutex.c **** 	tcb_t *t = thread_get_current();
  45              		.loc 1 20 0
  46 0008 FFF7FEFF 		bl	thread_get_current
  47              	.LVL2:
  48              	.LBB12:
  49              	.LBB13:
  50              		.file 2 "../../../uLipeRtosPico/ulipe_rtos_pico.h"
   1:../../../uLipeRtosPico/ulipe_rtos_pico.h **** /**
   2:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  * 							ULIPE RTOS PICO
   3:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *
   4:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *  @file ulipe_rtos_pico.h
   5:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *
   6:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *  @brief this file is treated as a master file
   7:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *
   8:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *
   9:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  */
  10:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #ifndef __ULIPE_RTOS_PICO_H
  11:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #define __ULIPE_RTOS_PICO_H
  12:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  13:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  14:../../../uLipeRtosPico/ulipe_rtos_pico.h **** /* include all the kernel header files actig as a glue module */
  15:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include <stdint.h>
  16:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include <stdbool.h>
  17:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include <stddef.h>
  18:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include <string.h>
  19:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  20:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "picokernel/inc/k_list.h"
  21:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "ulipe_rtos_kconfig.h"
  22:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  23:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #ifndef __ULIPE_RTOS_KCONFIG_H
  24:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	#error "No config file found, loading default setings"
  25:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #endif
  26:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  27:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  28:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  29:../../../uLipeRtosPico/ulipe_rtos_pico.h **** /* ulipe rtos pico status codes */
  30:../../../uLipeRtosPico/ulipe_rtos_pico.h **** typedef enum {
  31:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	/* general status */
  32:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_status_ok = 0,
  33:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_status_error,
  34:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_status_invalid_param,
  35:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_status_sched_locked,
  36:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_status_illegal_from_isr,
  37:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  38:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	/* threading status */
  39:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_thread_rdy,
  40:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_thread_del,
  41:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_thread_blk,
  42:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_thread_susp,
  43:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  44:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	/* semaphore status */
  45:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_sema_not_available,
ARM GAS  /tmp/ccSqR6Ip.s 			page 3


  46:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_sema_illegal_use_celling,
  47:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_mutex_already_available,
  48:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  49:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	/* queue status */
  50:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_queue_empty,
  51:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_queue_full,
  52:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  53:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	/* wqueue status */
  54:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_wqueue_already_exists,
  55:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  56:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	/* timer status */
  57:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_timer_expired,
  58:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_timer_running,
  59:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_timer_stopped,
  60:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_timer_busy,
  61:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  62:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  63:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	/* kernel configuration */
  64:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	k_not_available_with_current_config,
  65:../../../uLipeRtosPico/ulipe_rtos_pico.h **** }k_status_t;
  66:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  67:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  68:../../../uLipeRtosPico/ulipe_rtos_pico.h **** /**
  69:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *  @fn template()
  70:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *  @brief
  71:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *  @param
  72:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  *  @return
  73:../../../uLipeRtosPico/ulipe_rtos_pico.h ****  */
  74:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  75:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  76:../../../uLipeRtosPico/ulipe_rtos_pico.h **** /* resolves the arch dependend memory size */
  77:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #if	(K_ARCH_MEM_WIDTH_BYTE > 0)
  78:../../../uLipeRtosPico/ulipe_rtos_pico.h **** typedef uint8_t archtype_t;
  79:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #elif(K_ARCH_MEM_WIDTH_HALFWORD > 0)
  80:../../../uLipeRtosPico/ulipe_rtos_pico.h **** typedef uint16_t archtype_t;
  81:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #elif (K_ARCH_MEM_WIDTH_WORD > 0)
  82:../../../uLipeRtosPico/ulipe_rtos_pico.h **** typedef uint32_t archtype_t;
  83:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #elif (K_ARCH_MEM_WIDTH_DWORD > 0)
  84:../../../uLipeRtosPico/ulipe_rtos_pico.h **** typedef uint64_t archtype_t;
  85:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #else
  86:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #endif
  87:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  88:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  89:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #if(K_ENABLE_DYNAMIC_ALLOCATOR > 0)
  90:../../../uLipeRtosPico/ulipe_rtos_pico.h **** //#error "FATAL: Dynamic allocator is under development, please use memory pool instead!"
  91:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #ifndef K_HEAP_SIZE
  92:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #define K_HEAP_SIZE 1024
  93:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #endif
  94:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #endif
  95:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
  96:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #if(K_ENABLE_WORKQUEUES > 0)
  97:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #ifndef K_WQUEUES_STACK_SIZE
  98:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #define K_WQUEUES_STACK_SIZE 128
  99:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #endif
 100:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #endif
 101:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
 102:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #if(K_ENABLE_TICKLESS_IDLE > 0)
ARM GAS  /tmp/ccSqR6Ip.s 			page 4


 103:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #ifndef K_MAX_LOW_POWER_PERIOD
 104:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #define K_MAX_LOW_POWER_PERIOD	100
 105:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #endif
 106:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
 107:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #define K_HW_TIMER_COUNTS_PER_TICK (K_MACHINE_CLOCK / K_TICKER_RATE)
 108:../../../uLipeRtosPico/ulipe_rtos_pico.h **** extern void user_lowpower_entry(void *arg);
 109:../../../uLipeRtosPico/ulipe_rtos_pico.h **** extern void user_lowpower_exit(void *arg);
 110:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #endif
 111:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
 112:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_thread.h"
 113:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_port.h"
 114:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_kernel.h"
 115:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_message.h"
 116:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_raw_timer.h"
 117:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_sema.h"
 118:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_mutex.h"
 119:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_memp.h"
 120:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_mem_dyn.h"
 121:../../../uLipeRtosPico/ulipe_rtos_pico.h **** #include "include/picokernel/k_wqueue.h"
 122:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
 123:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
 124:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 
 125:../../../uLipeRtosPico/ulipe_rtos_pico.h **** /** assertion mechanism */
 126:../../../uLipeRtosPico/ulipe_rtos_pico.h **** static inline void ulipe_assert(bool x)
 127:../../../uLipeRtosPico/ulipe_rtos_pico.h **** {
 128:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 	if(!x){
  51              		.loc 2 128 0
  52 000c 40B1     		cbz	r0, .L17
  53 000e 0546     		mov	r5, r0
  54              	.LVL3:
  55              	.LBE13:
  56              	.LBE12:
  21:../../picokernel/k_mutex.c **** 	ULIPE_ASSERT(t != NULL);
  22:../../picokernel/k_mutex.c **** 
  23:../../picokernel/k_mutex.c **** 
  24:../../picokernel/k_mutex.c **** 	if(m == NULL) {
  57              		.loc 1 24 0
  58 0010 002C     		cmp	r4, #0
  59 0012 49D0     		beq	.L13
  25:../../picokernel/k_mutex.c **** 		ret = k_status_invalid_param;
  26:../../picokernel/k_mutex.c **** 		goto cleanup;
  27:../../picokernel/k_mutex.c **** 	}
  28:../../picokernel/k_mutex.c **** 
  29:../../picokernel/k_mutex.c **** 	if(port_from_isr()){
  60              		.loc 1 29 0
  61 0014 FFF7FEFF 		bl	port_from_isr
  62              	.LVL4:
  63 0018 0746     		mov	r7, r0
  64 001a 20B1     		cbz	r0, .L18
  30:../../picokernel/k_mutex.c **** 		/* take cannot be called from ISR */
  31:../../picokernel/k_mutex.c **** 		ret = k_status_illegal_from_isr;
  65              		.loc 1 31 0
  66 001c 0424     		movs	r4, #4
  67              	.LVL5:
  68 001e 44E0     		b	.L4
  69              	.LVL6:
  70              	.L17:
ARM GAS  /tmp/ccSqR6Ip.s 			page 5


  71              	.LBB15:
  72              	.LBB14:
 129:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 		port_set_break();
  73              		.loc 2 129 0
  74 0020 FFF7FEFF 		bl	port_set_break
  75              	.LVL7:
  76              	.L3:
  77 0024 FEE7     		b	.L3
  78              	.LVL8:
  79              	.L18:
  80              	.LBE14:
  81              	.LBE15:
  32:../../picokernel/k_mutex.c **** 		goto cleanup;
  33:../../picokernel/k_mutex.c **** 	}
  34:../../picokernel/k_mutex.c **** 
  35:../../picokernel/k_mutex.c **** 	archtype_t key = port_irq_lock();
  82              		.loc 1 35 0
  83 0026 FFF7FEFF 		bl	port_irq_lock
  84              	.LVL9:
  85 002a 0646     		mov	r6, r0
  86              	.LVL10:
  36:../../picokernel/k_mutex.c **** 
  37:../../picokernel/k_mutex.c **** 	if(!m->created) {
  87              		.loc 1 37 0
  88 002c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  89 002e 4BB1     		cbz	r3, .L19
  90              	.LVL11:
  91              	.L5:
  38:../../picokernel/k_mutex.c **** 		/* handle first time usage */
  39:../../picokernel/k_mutex.c **** 		k_work_list_init(&m->threads_pending);
  40:../../picokernel/k_mutex.c **** 		m->created = true;
  41:../../picokernel/k_mutex.c **** 	}
  42:../../picokernel/k_mutex.c **** 
  43:../../picokernel/k_mutex.c **** 
  44:../../picokernel/k_mutex.c **** 	if(m->thr_owner == NULL && (try)) {
  92              		.loc 1 44 0
  93 0030 6368     		ldr	r3, [r4, #4]
  94 0032 73B1     		cbz	r3, .L20
  95              	.L6:
  45:../../picokernel/k_mutex.c **** 		port_irq_unlock(key);
  46:../../picokernel/k_mutex.c **** 		goto cleanup;
  47:../../picokernel/k_mutex.c **** 	}
  48:../../picokernel/k_mutex.c **** 
  49:../../picokernel/k_mutex.c **** 	if(m->thr_owner != NULL ) {
  96              		.loc 1 49 0
  97 0034 5BB3     		cbz	r3, .L7
  50:../../picokernel/k_mutex.c **** 		/*
  51:../../picokernel/k_mutex.c **** 		 * if no key available, we need to insert the waiting thread
  52:../../picokernel/k_mutex.c **** 		 * on mutex pending list, when a key will become available
  53:../../picokernel/k_mutex.c **** 		 * the task will be woken as well
  54:../../picokernel/k_mutex.c **** 		 */
  55:../../picokernel/k_mutex.c **** 
  56:../../picokernel/k_mutex.c **** 		ret = k_make_not_ready(t);
  98              		.loc 1 56 0
  99 0036 2846     		mov	r0, r5
 100 0038 FFF7FEFF 		bl	k_make_not_ready
 101              	.LVL12:
ARM GAS  /tmp/ccSqR6Ip.s 			page 6


 102              	.LBB16:
 103              	.LBB17:
 128:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 		port_set_break();
 104              		.loc 2 128 0
 105 003c 88B1     		cbz	r0, .L8
 106              		.loc 2 129 0
 107 003e FFF7FEFF 		bl	port_set_break
 108              	.LVL13:
 109              	.L9:
 110 0042 FEE7     		b	.L9
 111              	.LVL14:
 112              	.L19:
 113              	.LBE17:
 114              	.LBE16:
  39:../../picokernel/k_mutex.c **** 		m->created = true;
 115              		.loc 1 39 0
 116 0044 04F10800 		add	r0, r4, #8
 117              	.LVL15:
 118 0048 FFF7FEFF 		bl	k_work_list_init
 119              	.LVL16:
  40:../../picokernel/k_mutex.c **** 	}
 120              		.loc 1 40 0
 121 004c 0123     		movs	r3, #1
 122 004e 2370     		strb	r3, [r4]
 123 0050 EEE7     		b	.L5
 124              	.L20:
  44:../../picokernel/k_mutex.c **** 		port_irq_unlock(key);
 125              		.loc 1 44 0 discriminator 1
 126 0052 B8F1000F 		cmp	r8, #0
 127 0056 EDD0     		beq	.L6
  45:../../picokernel/k_mutex.c **** 		goto cleanup;
 128              		.loc 1 45 0
 129 0058 3046     		mov	r0, r6
 130 005a FFF7FEFF 		bl	port_irq_unlock
 131              	.LVL17:
  18:../../picokernel/k_mutex.c **** 	bool reesched = false;
 132              		.loc 1 18 0
 133 005e 0024     		movs	r4, #0
 134              	.LVL18:
  46:../../picokernel/k_mutex.c **** 	}
 135              		.loc 1 46 0
 136 0060 23E0     		b	.L4
 137              	.LVL19:
 138              	.L8:
  57:../../picokernel/k_mutex.c **** 		ULIPE_ASSERT(ret == k_status_ok);
  58:../../picokernel/k_mutex.c **** 		t->thread_wait |= K_THR_PEND_MTX;
 139              		.loc 1 58 0
 140 0062 AB89     		ldrh	r3, [r5, #12]
 141 0064 43F40073 		orr	r3, r3, #512
 142 0068 AB81     		strh	r3, [r5, #12]	@ movhi
  59:../../picokernel/k_mutex.c **** 		ret = k_pend_obj(t, &m->threads_pending);
 143              		.loc 1 59 0
 144 006a 04F10801 		add	r1, r4, #8
 145 006e 2846     		mov	r0, r5
 146              	.LVL20:
 147 0070 FFF7FEFF 		bl	k_pend_obj
 148              	.LVL21:
ARM GAS  /tmp/ccSqR6Ip.s 			page 7


 149              	.LBB18:
 150              	.LBB19:
 128:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 		port_set_break();
 151              		.loc 2 128 0
 152 0074 0446     		mov	r4, r0
 153              	.LVL22:
 154 0076 38B9     		cbnz	r0, .L21
 155              	.LBE19:
 156              	.LBE18:
  60:../../picokernel/k_mutex.c **** 		ULIPE_ASSERT(ret == k_status_ok);
  61:../../picokernel/k_mutex.c **** 
  62:../../picokernel/k_mutex.c **** 		/* but in mutex case, if the owner has a priority
  63:../../picokernel/k_mutex.c **** 		 * too low, raise it with the priority of current task
  64:../../picokernel/k_mutex.c **** 		 */
  65:../../picokernel/k_mutex.c **** 		reesched = true;
 157              		.loc 1 65 0
 158 0078 0127     		movs	r7, #1
 159              	.LVL23:
 160              	.L10:
  66:../../picokernel/k_mutex.c **** 
  67:../../picokernel/k_mutex.c **** 	} else {
  68:../../picokernel/k_mutex.c **** 
  69:../../picokernel/k_mutex.c **** 		m->thr_owner = t;
  70:../../picokernel/k_mutex.c **** 		m->owner_prio = t->thread_prio;
  71:../../picokernel/k_mutex.c **** 		thread_set_prio(t, K_MUTEX_PRIO_CEIL_VAL);
  72:../../picokernel/k_mutex.c **** 	}
  73:../../picokernel/k_mutex.c **** 
  74:../../picokernel/k_mutex.c **** 
  75:../../picokernel/k_mutex.c **** 	if(!reesched){
 161              		.loc 1 75 0
 162 007a 8FB1     		cbz	r7, .L22
  76:../../picokernel/k_mutex.c **** 		port_irq_unlock(key);
  77:../../picokernel/k_mutex.c **** 		goto cleanup;
  78:../../picokernel/k_mutex.c **** 	}
  79:../../picokernel/k_mutex.c **** 
  80:../../picokernel/k_mutex.c **** 	port_irq_unlock(key);
 163              		.loc 1 80 0
 164 007c 3046     		mov	r0, r6
 165 007e FFF7FEFF 		bl	port_irq_unlock
 166              	.LVL24:
  81:../../picokernel/k_mutex.c **** 	/*
  82:../../picokernel/k_mutex.c **** 	 * if current thread entered on pending state, we need to reesched the
  83:../../picokernel/k_mutex.c **** 	 * thread set and find a new thread to execute, otherwise, dispatch idle
  84:../../picokernel/k_mutex.c **** 	 */
  85:../../picokernel/k_mutex.c **** 	k_sched_and_swap();
 167              		.loc 1 85 0
 168 0082 FFF7FEFF 		bl	k_sched_and_swap
 169              	.LVL25:
 170 0086 10E0     		b	.L4
 171              	.LVL26:
 172              	.L21:
 173              	.LBB21:
 174              	.LBB20:
 175              		.loc 2 129 0
 176 0088 FFF7FEFF 		bl	port_set_break
 177              	.LVL27:
 178              	.L11:
ARM GAS  /tmp/ccSqR6Ip.s 			page 8


 179 008c FEE7     		b	.L11
 180              	.LVL28:
 181              	.L7:
 182              	.LBE20:
 183              	.LBE21:
  69:../../picokernel/k_mutex.c **** 		m->owner_prio = t->thread_prio;
 184              		.loc 1 69 0
 185 008e 6560     		str	r5, [r4, #4]
  70:../../picokernel/k_mutex.c **** 		thread_set_prio(t, K_MUTEX_PRIO_CEIL_VAL);
 186              		.loc 1 70 0
 187 0090 AB7B     		ldrb	r3, [r5, #14]	@ zero_extendqisi2
 188 0092 6370     		strb	r3, [r4, #1]
  71:../../picokernel/k_mutex.c **** 	}
 189              		.loc 1 71 0
 190 0094 1821     		movs	r1, #24
 191 0096 2846     		mov	r0, r5
 192 0098 FFF7FEFF 		bl	thread_set_prio
 193              	.LVL29:
  18:../../picokernel/k_mutex.c **** 	bool reesched = false;
 194              		.loc 1 18 0
 195 009c 0024     		movs	r4, #0
 196              	.LVL30:
 197 009e ECE7     		b	.L10
 198              	.LVL31:
 199              	.L22:
  76:../../picokernel/k_mutex.c **** 		goto cleanup;
 200              		.loc 1 76 0
 201 00a0 3046     		mov	r0, r6
 202 00a2 FFF7FEFF 		bl	port_irq_unlock
 203              	.LVL32:
  77:../../picokernel/k_mutex.c **** 	}
 204              		.loc 1 77 0
 205 00a6 00E0     		b	.L4
 206              	.LVL33:
 207              	.L13:
  25:../../picokernel/k_mutex.c **** 		goto cleanup;
 208              		.loc 1 25 0
 209 00a8 0224     		movs	r4, #2
 210              	.LVL34:
 211              	.L4:
  86:../../picokernel/k_mutex.c **** 
  87:../../picokernel/k_mutex.c **** cleanup:
  88:../../picokernel/k_mutex.c **** 	return(ret);
  89:../../picokernel/k_mutex.c **** }
 212              		.loc 1 89 0
 213 00aa 2046     		mov	r0, r4
 214 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 215              		.cfi_endproc
 216              	.LFE20:
 218              		.section	.text.mutex_give,"ax",%progbits
 219              		.align	1
 220              		.global	mutex_give
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 224              		.fpu fpv4-sp-d16
 226              	mutex_give:
ARM GAS  /tmp/ccSqR6Ip.s 			page 9


 227              	.LFB21:
  90:../../picokernel/k_mutex.c **** 
  91:../../picokernel/k_mutex.c **** 
  92:../../picokernel/k_mutex.c **** 
  93:../../picokernel/k_mutex.c **** k_status_t mutex_give(kmutex_t *m)
  94:../../picokernel/k_mutex.c **** {
 228              		.loc 1 94 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              	.LVL35:
 233 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 234              	.LCFI1:
 235              		.cfi_def_cfa_offset 24
 236              		.cfi_offset 4, -24
 237              		.cfi_offset 5, -20
 238              		.cfi_offset 6, -16
 239              		.cfi_offset 7, -12
 240              		.cfi_offset 8, -8
 241              		.cfi_offset 14, -4
 242 0004 0546     		mov	r5, r0
 243              	.LVL36:
  95:../../picokernel/k_mutex.c **** 	k_status_t ret = k_status_ok;
  96:../../picokernel/k_mutex.c **** 	tcb_t *t = NULL;
  97:../../picokernel/k_mutex.c **** 	tcb_t *cur = thread_get_current();
 244              		.loc 1 97 0
 245 0006 FFF7FEFF 		bl	thread_get_current
 246              	.LVL37:
 247 000a 0646     		mov	r6, r0
 248              	.LVL38:
  98:../../picokernel/k_mutex.c **** 
  99:../../picokernel/k_mutex.c **** 	if(port_from_isr()){
 249              		.loc 1 99 0
 250 000c FFF7FEFF 		bl	port_from_isr
 251              	.LVL39:
 252 0010 18B1     		cbz	r0, .L34
 100:../../picokernel/k_mutex.c **** 		/* take cannot be called from ISR */
 101:../../picokernel/k_mutex.c **** 		ret = k_status_illegal_from_isr;
 253              		.loc 1 101 0
 254 0012 0424     		movs	r4, #4
 255              	.LVL40:
 256              	.L24:
 102:../../picokernel/k_mutex.c **** 		goto cleanup;
 103:../../picokernel/k_mutex.c **** 	}
 104:../../picokernel/k_mutex.c **** 
 105:../../picokernel/k_mutex.c **** 
 106:../../picokernel/k_mutex.c **** 	if(m == NULL) {
 107:../../picokernel/k_mutex.c **** 		ret = k_status_invalid_param;
 108:../../picokernel/k_mutex.c **** 		goto cleanup;
 109:../../picokernel/k_mutex.c **** 	}
 110:../../picokernel/k_mutex.c **** 
 111:../../picokernel/k_mutex.c **** 
 112:../../picokernel/k_mutex.c **** 	if(cur != m->thr_owner) {
 113:../../picokernel/k_mutex.c **** 		/* only the mutex owner can release it */
 114:../../picokernel/k_mutex.c **** 		ret = k_status_invalid_param;
 115:../../picokernel/k_mutex.c **** 		goto cleanup;
 116:../../picokernel/k_mutex.c **** 	}
ARM GAS  /tmp/ccSqR6Ip.s 			page 10


 117:../../picokernel/k_mutex.c **** 
 118:../../picokernel/k_mutex.c **** 	if(m->thr_owner == NULL) {
 119:../../picokernel/k_mutex.c **** 		ret = k_mutex_already_available;
 120:../../picokernel/k_mutex.c **** 		goto cleanup;
 121:../../picokernel/k_mutex.c **** 
 122:../../picokernel/k_mutex.c **** 	}
 123:../../picokernel/k_mutex.c **** 
 124:../../picokernel/k_mutex.c **** 	archtype_t key = port_irq_lock();
 125:../../picokernel/k_mutex.c **** 	if(!m->created) {
 126:../../picokernel/k_mutex.c **** 		/* handle first time usage */
 127:../../picokernel/k_mutex.c **** 		k_work_list_init(&m->threads_pending);
 128:../../picokernel/k_mutex.c **** 		m->created = true;
 129:../../picokernel/k_mutex.c **** 	}
 130:../../picokernel/k_mutex.c **** 
 131:../../picokernel/k_mutex.c **** 	/* restore thread original priority */
 132:../../picokernel/k_mutex.c **** 
 133:../../picokernel/k_mutex.c **** 	/*
 134:../../picokernel/k_mutex.c **** 	 * once a mutex was updated its keys
 135:../../picokernel/k_mutex.c **** 	 * we need to verify if a new highprio task is available to
 136:../../picokernel/k_mutex.c **** 	 * run
 137:../../picokernel/k_mutex.c **** 	 */
 138:../../picokernel/k_mutex.c **** 	t = k_unpend_obj(&m->threads_pending);
 139:../../picokernel/k_mutex.c **** 	if(t == NULL) {
 140:../../picokernel/k_mutex.c **** 		/* no tasks pendings, just get out here */
 141:../../picokernel/k_mutex.c **** 		uint8_t tmp = m->owner_prio;
 142:../../picokernel/k_mutex.c **** 		m->owner_prio = 0;
 143:../../picokernel/k_mutex.c **** 		m->thr_owner  = NULL;
 144:../../picokernel/k_mutex.c **** 
 145:../../picokernel/k_mutex.c **** 		/* restore thread original priority */
 146:../../picokernel/k_mutex.c **** 		thread_set_prio(cur, tmp);
 147:../../picokernel/k_mutex.c **** 
 148:../../picokernel/k_mutex.c **** 		port_irq_unlock(key);
 149:../../picokernel/k_mutex.c **** 		goto cleanup;
 150:../../picokernel/k_mutex.c **** 	} else {
 151:../../picokernel/k_mutex.c **** 		uint8_t tmp = m->owner_prio;
 152:../../picokernel/k_mutex.c **** 		m->thr_owner = t;
 153:../../picokernel/k_mutex.c **** 		m->owner_prio = t->thread_prio;
 154:../../picokernel/k_mutex.c **** 		t->thread_wait &= ~(K_THR_PEND_MTX);
 155:../../picokernel/k_mutex.c **** 
 156:../../picokernel/k_mutex.c **** 		ret = k_make_ready(t);
 157:../../picokernel/k_mutex.c **** 		ULIPE_ASSERT(ret == k_status_ok);
 158:../../picokernel/k_mutex.c **** 		/*restore last owner original prio */
 159:../../picokernel/k_mutex.c **** 		thread_set_prio(cur, tmp);
 160:../../picokernel/k_mutex.c **** 
 161:../../picokernel/k_mutex.c **** 
 162:../../picokernel/k_mutex.c **** 		port_irq_unlock(key);
 163:../../picokernel/k_mutex.c **** 
 164:../../picokernel/k_mutex.c **** 
 165:../../picokernel/k_mutex.c **** 		k_sched_and_swap();
 166:../../picokernel/k_mutex.c **** 	}
 167:../../picokernel/k_mutex.c **** 
 168:../../picokernel/k_mutex.c **** 
 169:../../picokernel/k_mutex.c **** cleanup:
 170:../../picokernel/k_mutex.c **** 	return(ret);
 171:../../picokernel/k_mutex.c **** }
 257              		.loc 1 171 0
 258 0014 2046     		mov	r0, r4
ARM GAS  /tmp/ccSqR6Ip.s 			page 11


 259 0016 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 260              	.LVL41:
 261              	.L34:
 106:../../picokernel/k_mutex.c **** 		ret = k_status_invalid_param;
 262              		.loc 1 106 0
 263 001a 002D     		cmp	r5, #0
 264 001c 3AD0     		beq	.L30
 112:../../picokernel/k_mutex.c **** 		/* only the mutex owner can release it */
 265              		.loc 1 112 0
 266 001e 6B68     		ldr	r3, [r5, #4]
 267 0020 9E42     		cmp	r6, r3
 268 0022 01D0     		beq	.L35
 114:../../picokernel/k_mutex.c **** 		goto cleanup;
 269              		.loc 1 114 0
 270 0024 0224     		movs	r4, #2
 271 0026 F5E7     		b	.L24
 272              	.L35:
 118:../../picokernel/k_mutex.c **** 		ret = k_mutex_already_available;
 273              		.loc 1 118 0
 274 0028 B3B3     		cbz	r3, .L32
 124:../../picokernel/k_mutex.c **** 	if(!m->created) {
 275              		.loc 1 124 0
 276 002a FFF7FEFF 		bl	port_irq_lock
 277              	.LVL42:
 278 002e 0746     		mov	r7, r0
 279              	.LVL43:
 125:../../picokernel/k_mutex.c **** 		/* handle first time usage */
 280              		.loc 1 125 0
 281 0030 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 282 0032 2BB9     		cbnz	r3, .L25
 127:../../picokernel/k_mutex.c **** 		m->created = true;
 283              		.loc 1 127 0
 284 0034 05F10800 		add	r0, r5, #8
 285              	.LVL44:
 286 0038 FFF7FEFF 		bl	k_work_list_init
 287              	.LVL45:
 128:../../picokernel/k_mutex.c **** 	}
 288              		.loc 1 128 0
 289 003c 0123     		movs	r3, #1
 290 003e 2B70     		strb	r3, [r5]
 291              	.L25:
 138:../../picokernel/k_mutex.c **** 	if(t == NULL) {
 292              		.loc 1 138 0
 293 0040 05F10800 		add	r0, r5, #8
 294 0044 FFF7FEFF 		bl	k_unpend_obj
 295              	.LVL46:
 139:../../picokernel/k_mutex.c **** 		/* no tasks pendings, just get out here */
 296              		.loc 1 139 0
 297 0048 78B1     		cbz	r0, .L36
 298              	.LBB22:
 151:../../picokernel/k_mutex.c **** 		m->thr_owner = t;
 299              		.loc 1 151 0
 300 004a 95F80180 		ldrb	r8, [r5, #1]	@ zero_extendqisi2
 301              	.LVL47:
 152:../../picokernel/k_mutex.c **** 		m->owner_prio = t->thread_prio;
 302              		.loc 1 152 0
 303 004e 6860     		str	r0, [r5, #4]
ARM GAS  /tmp/ccSqR6Ip.s 			page 12


 153:../../picokernel/k_mutex.c **** 		t->thread_wait &= ~(K_THR_PEND_MTX);
 304              		.loc 1 153 0
 305 0050 827B     		ldrb	r2, [r0, #14]	@ zero_extendqisi2
 306 0052 6A70     		strb	r2, [r5, #1]
 154:../../picokernel/k_mutex.c **** 
 307              		.loc 1 154 0
 308 0054 8289     		ldrh	r2, [r0, #12]
 309 0056 22F40072 		bic	r2, r2, #512
 310 005a 8281     		strh	r2, [r0, #12]	@ movhi
 156:../../picokernel/k_mutex.c **** 		ULIPE_ASSERT(ret == k_status_ok);
 311              		.loc 1 156 0
 312 005c FFF7FEFF 		bl	k_make_ready
 313              	.LVL48:
 314              	.LBB23:
 315              	.LBB24:
 128:../../../uLipeRtosPico/ulipe_rtos_pico.h **** 		port_set_break();
 316              		.loc 2 128 0
 317 0060 0446     		mov	r4, r0
 318 0062 68B1     		cbz	r0, .L27
 319              		.loc 2 129 0
 320 0064 FFF7FEFF 		bl	port_set_break
 321              	.LVL49:
 322              	.L28:
 323 0068 FEE7     		b	.L28
 324              	.LVL50:
 325              	.L36:
 326              	.LBE24:
 327              	.LBE23:
 328              	.LBE22:
 329              	.LBB25:
 141:../../picokernel/k_mutex.c **** 		m->owner_prio = 0;
 330              		.loc 1 141 0
 331 006a 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 332              	.LVL51:
 142:../../picokernel/k_mutex.c **** 		m->thr_owner  = NULL;
 333              		.loc 1 142 0
 334 006c 0024     		movs	r4, #0
 335 006e 6C70     		strb	r4, [r5, #1]
 143:../../picokernel/k_mutex.c **** 
 336              		.loc 1 143 0
 337 0070 6C60     		str	r4, [r5, #4]
 146:../../picokernel/k_mutex.c **** 
 338              		.loc 1 146 0
 339 0072 3046     		mov	r0, r6
 340              	.LVL52:
 341 0074 FFF7FEFF 		bl	thread_set_prio
 342              	.LVL53:
 148:../../picokernel/k_mutex.c **** 		goto cleanup;
 343              		.loc 1 148 0
 344 0078 3846     		mov	r0, r7
 345 007a FFF7FEFF 		bl	port_irq_unlock
 346              	.LVL54:
 149:../../picokernel/k_mutex.c **** 	} else {
 347              		.loc 1 149 0
 348 007e C9E7     		b	.L24
 349              	.LVL55:
 350              	.L27:
ARM GAS  /tmp/ccSqR6Ip.s 			page 13


 351              	.LBE25:
 352              	.LBB26:
 159:../../picokernel/k_mutex.c **** 
 353              		.loc 1 159 0
 354 0080 4146     		mov	r1, r8
 355 0082 3046     		mov	r0, r6
 356              	.LVL56:
 357 0084 FFF7FEFF 		bl	thread_set_prio
 358              	.LVL57:
 162:../../picokernel/k_mutex.c **** 
 359              		.loc 1 162 0
 360 0088 3846     		mov	r0, r7
 361 008a FFF7FEFF 		bl	port_irq_unlock
 362              	.LVL58:
 165:../../picokernel/k_mutex.c **** 	}
 363              		.loc 1 165 0
 364 008e FFF7FEFF 		bl	k_sched_and_swap
 365              	.LVL59:
 366 0092 BFE7     		b	.L24
 367              	.LVL60:
 368              	.L30:
 369              	.LBE26:
 107:../../picokernel/k_mutex.c **** 		goto cleanup;
 370              		.loc 1 107 0
 371 0094 0224     		movs	r4, #2
 372 0096 BDE7     		b	.L24
 373              	.L32:
 119:../../picokernel/k_mutex.c **** 		goto cleanup;
 374              		.loc 1 119 0
 375 0098 0B24     		movs	r4, #11
 376 009a BBE7     		b	.L24
 377              		.cfi_endproc
 378              	.LFE21:
 380              		.text
 381              	.Letext0:
 382              		.file 3 "/home/venturus/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_
 383              		.file 4 "/home/venturus/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 384              		.file 5 "/home/venturus/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 385              		.file 6 "/home/venturus/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 386              		.file 7 "/home/venturus/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/std
 387              		.file 8 "/home/venturus/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 388              		.file 9 "../../../uLipeRtosPico/picokernel/inc/k_list.h"
 389              		.file 10 "../../../uLipeRtosPico/include/picokernel/k_thread.h"
 390              		.file 11 "../../../uLipeRtosPico/include/picokernel/k_kernel.h"
 391              		.file 12 "../../../uLipeRtosPico/include/picokernel/k_mutex.h"
 392              		.file 13 "../../../uLipeRtosPico/include/picokernel/k_port.h"
ARM GAS  /tmp/ccSqR6Ip.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 k_mutex.c
     /tmp/ccSqR6Ip.s:18     .text.mutex_take:0000000000000000 $t
     /tmp/ccSqR6Ip.s:25     .text.mutex_take:0000000000000000 mutex_take
     /tmp/ccSqR6Ip.s:219    .text.mutex_give:0000000000000000 $t
     /tmp/ccSqR6Ip.s:226    .text.mutex_give:0000000000000000 mutex_give
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
thread_get_current
port_from_isr
port_set_break
port_irq_lock
k_make_not_ready
k_work_list_init
port_irq_unlock
k_pend_obj
k_sched_and_swap
thread_set_prio
k_unpend_obj
k_make_ready
